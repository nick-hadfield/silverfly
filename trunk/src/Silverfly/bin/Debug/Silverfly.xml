<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Silverfly</name>
    </assembly>
    <members>
        <member name="T:Silverfly.Disposable">
            <summary>
            A reusable implementation of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Silverfly.Disposable.#ctor(System.Action,System.Action)">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.Disposable"/> class.
            </summary>
            <param name="init">A lambda to be called during construction.</param>
            <param name="term">A lambda to be called during disposal.</param>
        </member>
        <member name="M:Silverfly.Disposable.Dispose">
            <summary>
            Called on disposal.
            </summary>
        </member>
        <member name="T:Silverfly.Scopes.IScopeStack`1">
            <summary>
            A stack of scopes/contexts.
            </summary>
            <typeparam name="SCOPE">The type of scopes/contexts to be stored on the stack.</typeparam>
        </member>
        <member name="M:Silverfly.Scopes.IScopeStack`1.Peek">
            <summary>
            Gets the inner most scope.
            </summary>
        </member>
        <member name="M:Silverfly.Scopes.IScopeStack`1.Push(`0)">
            <summary>
            Adds a scope to the scope stack.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Silverfly.Scopes.IScopeStack`1.Pop">
            <summary>
            Pops a scope from the scope stack.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Silverfly.IBus">
            <summary>
            A publish/subscribe event bus.
            </summary>
        </member>
        <member name="M:Silverfly.IBus.Publish``1(System.Object,``0)">
            <summary>
            Publish a notification onto the event bus.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notification to be published.</typeparam>
            <param name="sender">Identifies the sender of the notification.</param>
            <param name="notification">The notification to be published.</param>
        </member>
        <member name="M:Silverfly.IBus.Subscribe``1(System.Action{System.Object,``0})">
            <summary>
            Subscribe to notifications of type <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notifications to be handled.</typeparam>
            <param name="handler">The handler for the notifications.</param>
        </member>
        <member name="M:Silverfly.IBus.Unsubscribe``1(System.Action{System.Object,``0})">
            <summary>
            Unsubscribe handler from notifications of type <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notifications from which to remove the handler.</typeparam>
            <param name="handler">The handler to be removed.</param>
        </member>
        <member name="T:Silverfly.BusScope">
            <summary>
            A scope for the event bus.
            </summary>
        </member>
        <member name="T:Silverfly.Scopes.ScopeStack`1">
            <summary>
            A stack of scopes/contexts.
            </summary>
            <typeparam name="SCOPE">The type of scopes/contexts to be stored on the stack.</typeparam>
        </member>
        <member name="M:Silverfly.Scopes.ScopeStack`1.#ctor">
            <summary>
            Don't allow a default constuctor.
            </summary>
        </member>
        <member name="M:Silverfly.Scopes.ScopeStack`1.#ctor(System.String)">
            <summary>
            Initialises the scope stack.
            </summary>
            <param name="key">Identifies which stack to retrieve.</param>
        </member>
        <member name="F:Silverfly.Scopes.ScopeStack`1._key">
            <summary>
            Identifies which stack we wish to retrieve.
            </summary>
        </member>
        <member name="M:Silverfly.Scopes.ScopeStack`1.Peek">
            <summary>
            Gets the inner most scope.
            </summary>
        </member>
        <member name="M:Silverfly.Scopes.ScopeStack`1.Push(`0)">
            <summary>
            Adds a scope to the scope stack.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Silverfly.Scopes.ScopeStack`1.Pop">
            <summary>
            Pops a scope from the scope stack.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Silverfly.Scopes.ScopeStack`1.Stack">
            <summary>
            Gets the current stack.
            </summary>
            <value>The current stack.</value>
        </member>
        <member name="T:Silverfly.Bus">
            <summary>
            A publish/subscribe event bus (threadsafe).
            </summary>
            <remarks>
            Weak references (on subscriptions) that have been garbage collected or finalised will be marked 
            for cleanup (on a separate thread) when a notification is next published to that subscription.
            </remarks>
        </member>
        <member name="F:Silverfly.Bus._handlersIndex">
            <summary>
            A dictionary of notification handlers.
            </summary>
        </member>
        <member name="F:Silverfly.Bus._lock">
            <summary>
            Provides locking for the bus.
            </summary>
        </member>
        <member name="M:Silverfly.Bus.Handlers``1">
            <summary>
            Enumerate through handlers supporting the <see cref="T:System.Type"/> as specified by <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> supported by handlers to be retrieved.</typeparam>
            <returns>The  handlers supporting the <see cref="T:System.Type"/> as specified by <typeparamref name="TNotification"/>.</returns>
        </member>
        <member name="M:Silverfly.Bus.Publish``1(System.Object,``0)">
            <summary>
            Publish a notification onto the event bus.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notification to be published.</typeparam>
            <param name="sender">Identifies the sender of the notification.</param>
            <param name="notification">The notification to be published.</param>
        </member>
        <member name="M:Silverfly.Bus.Subscribe``1(System.Action{System.Object,``0})">
            <summary>
            Subscribe to notifications of type <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notifications to be handled.</typeparam>
            <param name="handler">The handler for the notifications.</param>
        </member>
        <member name="M:Silverfly.Bus.Unsubscribe``1(System.Action{System.Object,``0})">
            <summary>
            Unsubscribe handler from notifications of type <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notifications from which to remove the handler.</typeparam>
            <param name="handler">The handler to be removed.</param>
        </member>
        <member name="M:Silverfly.Bus.Unsubscribe``1(Silverfly.HandlerInfo)">
            <summary>
            Unsubscribe handle info from notifications of type <typeparamref name="TNotification"/>.
            </summary>
            <typeparam name="TNotification">Specifies the <see cref="T:System.Type"/> of the notifications from which to remove the handle info.</typeparam>
            <param name="handlerInfo">The handler info to be removed.</param>
        </member>
        <member name="T:Silverfly.HandlerInfo">
            <summary>
            Information about a handler.
            </summary>
        </member>
        <member name="M:Silverfly.HandlerInfo.Create``1(System.Action{System.Object,``0})">
            <summary>
            Creates a <see cref="T:Silverfly.HandlerInfo"/> for the specified handler.
            </summary>
            <typeparam name="TNotification">The notification.</typeparam>
            <param name="handler">The handler for a specific notification.</param>
            <returns>A <see cref="T:Silverfly.HandlerInfo"/> instance for the specified handler.</returns>
        </member>
        <member name="M:Silverfly.HandlerInfo.#ctor(System.Object,System.Func{System.Object,System.Action{System.Object,System.Object}})">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.HandlerInfo"/> class.
            </summary>
            <param name="handler">The original handler.</param>
            <param name="handlerWrapperCreator">
            A function that generates a handler of type Action&lt;object, object&gt; that wraps a more specific
            handler. This code would be a lot simpler if we just wrote a wrapper handler here directly
            but we can't do that because that would result in another reference to the handler (which
            defeats the purpose of using a weak reference.</param>
        </member>
        <member name="F:Silverfly.HandlerInfo._handler">
            <summary>
            A weak reference to the original handler.
            </summary>
        </member>
        <member name="F:Silverfly.HandlerInfo._handlerWrapperCreator">
            <summary>
            A function that returns an action of type Action&lt;object, object&gt; that wraps the original handler.
            </summary>
        </member>
        <member name="P:Silverfly.HandlerInfo.Handler">
            <summary>
            Gets a weak reference to the original handler.
            </summary>
        </member>
        <member name="P:Silverfly.HandlerInfo.Wrapper">
            <summary>
            Gets a function that returns an action of type Action&lt;object, object%gt; that wraps the original handler.
            </summary>
        </member>
        <member name="T:Silverfly.SilverflyException">
            <summary>
            Represents errors that occur during framework execution.
            </summary>
        </member>
        <member name="M:Silverfly.SilverflyException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.SilverflyException"/> class.
            </summary>
        </member>
        <member name="M:Silverfly.SilverflyException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.SilverflyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Silverfly.SilverflyException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.SilverflyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Silverfly.SilverflyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:Silverfly.SilverflyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialised object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
    </members>
</doc>
